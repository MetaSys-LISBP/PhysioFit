"""
Configuration variables for the tests

Shared pre-defined parameters
The return value of fixture function will be available as a predefined
parameter for all test functions. The test's parameter name must be the same as
the fixture function's name.
"""
import numpy as np
import pandas as pd
import pytest

from physiofit.models.base_model import StandardDevs
from physiofit.base.io import IoHandler


@pytest.fixture
def placeholder_data():
    return pd.DataFrame(
        {
            "time": np.arange(6, step=0.2),
            "X": np.arange(6, step=0.2),
            "Glucose": np.arange(6, step=0.2),
            "Acetate": np.arange(6, step=0.2),
            "Glutamate": np.arange(6, step=0.2),
        }
    )

@pytest.fixture
def base_test_data():
    """Test data to use in tests
    (taken from BergÃ¨s et al., 2021 --> KEIO_ROBOT1_1)"""

    return pd.DataFrame.from_dict(
        {
            "time": [0, 1.18, 2.27, 3.13, 3.77, 4.42,
                     4.82, 0.67, 1.72, 2.8, 3.63, 4.27, 4.88],
            "X": [0.03, 0.05, 0.08, 0.13, 0.18, 0.24, 0.34,
                  np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
            "Glucose": [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        14, 15.30, 13.68, 12.81, 12.15, 10.93],
            "Acetate": [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        0.01, 0.33, 0.72, 1.17, 1.63, 2.14]
        }
    )

@pytest.fixture
def parameters():
    return {
        "t_lag": 1.4,
        "X_0": 0.02,
        "growth_rate": 0.8,
        "Glucose_q": -8,
        "Glucose_M0": 20,
        "Acetate_q": 3,
        "Acetate_M0": 0.01,
        "Glutamate_q": 2,
        "Glutamate_M0": 0.01
    }


@pytest.fixture
def model_1_data(placeholder_data, parameters):
    """ Test data to use in tests for the model_1: Steady-state batch model
    with lag phase and degradation of metabolites. Data is simulated using
    synthetic parameters"""

    io = IoHandler()
    model = io.select_model(
        name="Steady-state batch model with lag phase and degradation of "
             "metabolites",
        data=placeholder_data
    )
    model.get_params()
    model.parameters.update(parameters)
    model.args = {"Degradation": {"Glucose": 0, "Acetate": 0, "Glutamate": 1}}
    sim_data = model.simulate(
        list(model.parameters.values()),
        model.data.drop("time", axis=1),
        model.time_vector,
        model.args
    )
    df = pd.DataFrame(
        data=sim_data,
        index=model.time_vector,
        columns=model.name_vector
    )
    df.index.name = "time"
    return df.reset_index()


@pytest.fixture
def model_2_data(placeholder_data, parameters):
    """ Test data to use in tests for the model_2: Steady-state batch model
    with lag phase. Data is simulated using synthetic parameters"""

    io = IoHandler()
    model = io.select_model(
        name="Steady-state batch model with lag phase",
        data=placeholder_data
    )
    model.get_params()
    model.parameters.update(parameters)
    sim_data = model.simulate(
        list(model.parameters.values()),
        model.data.drop("time", axis=1),
        model.time_vector,
        model.args
    )
    df = pd.DataFrame(
        data=sim_data,
        index=model.time_vector,
        columns=model.name_vector
    )
    df.index.name = "time"
    return df.reset_index()

@pytest.fixture
def model_4_data(placeholder_data, parameters):
    """ Test data to use in tests for the model_2: Steady-state batch model
    with lag phase. Data is simulated using synthetic parameters"""

    io = IoHandler()
    model = io.select_model(
        name="Steady-state batch model",
        data=placeholder_data
    )
    model.get_params()
    del parameters["t_lag"]
    model.parameters.update(parameters)
    sim_data = model.simulate(
        list(model.parameters.values()),
        model.data.drop("time", axis=1),
        model.time_vector,
        model.args
    )
    df = pd.DataFrame(
        data=sim_data,
        index=model.time_vector,
        columns=model.name_vector
    )
    df.index.name = "time"
    return df.reset_index()


@pytest.fixture
def monod_model_data():
    """
    Test data to use in tests for the Monod model. Data was simulated using
    the pyFOOMB package (see the `example 6 notebook <https://github.com/
    MicroPhen/pyFOOMB/blob/main/examples/Example06_BioprocessModels.ipynb>`_).
    """
    return pd.DataFrame.from_dict(
        {
            "time": [0.00000000e+00, 2.84530395e-06, 1.87841467e-02,
                     6.86084776e-02, 1.18432808e-01, 1.68257139e-01,
                     2.43764260e-01, 3.19271381e-01, 4.49726191e-01,
                     5.80181002e-01, 7.10635813e-01, 9.19477706e-01,
                     1.12831960e+00, 1.33716149e+00, 1.75431493e+00,
                     2.17146836e+00, 2.58862180e+00, 3.00577523e+00,
                     3.42292866e+00, 3.84008210e+00, 4.25723553e+00,
                     4.67438897e+00, 5.09154240e+00, 5.50869584e+00,
                     5.92584927e+00, 6.34300270e+00, 6.76015614e+00,
                     7.17730957e+00, 7.59446301e+00, 8.01161644e+00,
                     8.29621850e+00, 8.58082057e+00, 8.86542263e+00,
                     9.29555394e+00, 9.61391297e+00, 9.93227199e+00,
                     1.02506310e+01, 1.05689900e+01, 1.10543781e+01,
                     1.15397661e+01, 1.18839716e+01, 1.22281772e+01,
                     1.25723827e+01, 1.29165883e+01, 1.32607938e+01,
                     1.36049994e+01, 1.39492049e+01, 1.42934105e+01,
                     1.46376160e+01, 1.49818216e+01, 1.53260271e+01,
                     1.56702327e+01, 1.60144382e+01, 1.62611781e+01,
                     1.65079181e+01, 1.66591950e+01, 1.68104719e+01,
                     1.69021125e+01, 1.69937532e+01, 1.70503459e+01,
                     1.71069386e+01, 1.71431957e+01, 1.71794528e+01,
                     1.72036226e+01, 1.72277924e+01, 1.72445191e+01,
                     1.72612458e+01, 1.72732201e+01, 1.72851944e+01,
                     1.72940250e+01, 1.73028555e+01, 1.73116860e+01,
                     1.73176659e+01, 1.73236458e+01, 1.73296257e+01,
                     1.73356056e+01,
                     1.73415855e+01, 1.73452250e+01, 1.73479133e+01,
                     1.73506016e+01,
                     1.73532900e+01, 1.73559783e+01, 1.73586666e+01,
                     1.73613549e+01,
                     1.73640432e+01, 1.73667316e+01, 1.73694199e+01,
                     1.73721082e+01,
                     1.73747965e+01, 1.73774848e+01, 1.73801731e+01,
                     1.73828615e+01,
                     1.73855498e+01, 1.73882381e+01, 1.73909264e+01,
                     1.73936147e+01,
                     1.73963031e+01, 1.74007815e+01, 1.74052600e+01,
                     1.74097384e+01,
                     1.74142169e+01, 1.74186953e+01, 1.74231738e+01,
                     1.74276522e+01,
                     1.74399174e+01, 1.74521827e+01, 1.74644479e+01,
                     1.74767132e+01,
                     1.75064657e+01, 1.75362183e+01, 1.75967028e+01,
                     1.76313304e+01,
                     1.76659580e+01, 1.77005856e+01, 1.77352132e+01,
                     1.77698407e+01,
                     1.78044683e+01, 1.78390959e+01, 1.78990820e+01,
                     1.79590681e+01,
                     1.80190541e+01, 1.81378620e+01, 1.83754877e+01,
                     1.87462973e+01,
                     1.93988066e+01, 2.22020563e+01, 2.40000000e+01],
            "X": [1.00000000e-02, 1.00000114e-02, 1.00755151e-02,
                  1.02785070e-02,
                  1.04851341e-02, 1.06957646e-02, 1.10230425e-02,
                  1.13603070e-02,
                  1.19675160e-02, 1.26070854e-02, 1.32807477e-02,
                  1.44349438e-02,
                  1.56894776e-02, 1.70530554e-02, 2.01425914e-02,
                  2.37924513e-02,
                  2.81029034e-02, 3.31932538e-02, 3.92051466e-02,
                  4.63058753e-02,
                  5.46927632e-02, 6.45987091e-02, 7.62987771e-02,
                  9.01178828e-02,
                  1.06439804e-01, 1.25717816e-01, 1.48487267e-01,
                  1.75380434e-01,
                  2.07144077e-01, 2.44660157e-01, 2.74081338e-01,
                  3.07039387e-01,
                  3.43960267e-01, 4.08357175e-01, 4.63663091e-01,
                  5.26456335e-01,
                  5.97751620e-01, 6.78700806e-01, 8.23709014e-01,
                  9.99694095e-01,
                  1.14682179e+00, 1.31559067e+00, 1.50918382e+00,
                  1.73124907e+00,
                  1.98596629e+00, 2.27812618e+00, 2.61321891e+00,
                  2.99753328e+00,
                  3.43826807e+00, 3.94365639e+00, 4.52310078e+00,
                  5.18731095e+00,
                  5.94841972e+00, 6.56115855e+00, 7.23602834e+00,
                  7.68287603e+00,
                  8.15625966e+00, 8.45628622e+00, 8.76633978e+00,
                  8.96269975e+00,
                  9.16254503e+00, 9.29221224e+00, 9.42289356e+00,
                  9.51038000e+00,
                  9.59792939e+00, 9.65838042e+00, 9.71851163e+00,
                  9.76120267e+00,
                  9.80340828e+00, 9.83407224e+00, 9.86416930e+00,
                  9.89345565e+00,
                  9.91264436e+00, 9.93111628e+00, 9.94861855e+00,
                  9.96478787e+00,
                  9.97911442e+00, 9.98665391e+00, 9.99153422e+00,
                  9.99576940e+00,
                  9.99932800e+00, 1.00022108e+01, 1.00044572e+01,
                  1.00061428e+01,
                  1.00073654e+01, 1.00082263e+01, 1.00088188e+01,
                  1.00092206e+01,
                  1.00094898e+01, 1.00096671e+01, 1.00097831e+01,
                  1.00098593e+01,
                  1.00099092e+01, 1.00099414e+01, 1.00099618e+01,
                  1.00099747e+01,
                  1.00099831e+01, 1.00099916e+01, 1.00099960e+01,
                  1.00099976e+01,
                  1.00099979e+01, 1.00099983e+01, 1.00099988e+01,
                  1.00099996e+01,
                  1.00100002e+01, 1.00100000e+01, 1.00099999e+01,
                  1.00099999e+01,
                  1.00100000e+01, 1.00100000e+01, 1.00099996e+01,
                  1.00100001e+01,
                  1.00100001e+01, 1.00100000e+01, 1.00100000e+01,
                  1.00100000e+01,
                  1.00100000e+01, 1.00100000e+01, 1.00100000e+01,
                  1.00100000e+01,
                  1.00100000e+01, 1.00100000e+01, 1.00100000e+01,
                  1.00100000e+01,
                  1.00100000e+01, 1.00100000e+01, 1.00100000e+01],
            "S_substrate": [2.00000000e+01, 2.00000000e+01, 1.99998490e+01,
                            1.99994430e+01,
                            1.99990297e+01, 1.99986085e+01, 1.99979539e+01,
                            1.99972794e+01,
                            1.99960650e+01, 1.99947858e+01, 1.99934385e+01,
                            1.99911301e+01,
                            1.99886210e+01, 1.99858939e+01, 1.99797148e+01,
                            1.99724151e+01,
                            1.99637942e+01, 1.99536135e+01, 1.99415897e+01,
                            1.99273882e+01,
                            1.99106145e+01, 1.98908026e+01, 1.98674024e+01,
                            1.98397642e+01,
                            1.98071204e+01, 1.97685644e+01, 1.97230255e+01,
                            1.96692391e+01,
                            1.96057118e+01, 1.95306797e+01, 1.94718373e+01,
                            1.94059212e+01,
                            1.93320795e+01, 1.92032856e+01, 1.90926738e+01,
                            1.89670873e+01,
                            1.88244968e+01, 1.86625984e+01, 1.83725820e+01,
                            1.80206118e+01,
                            1.77263564e+01, 1.73888187e+01, 1.70016324e+01,
                            1.65575019e+01,
                            1.60480674e+01, 1.54637476e+01, 1.47935622e+01,
                            1.40249334e+01,
                            1.31434639e+01, 1.21326872e+01, 1.09737984e+01,
                            9.64537810e+00,
                            8.12316056e+00, 6.89768289e+00, 5.54794333e+00,
                            4.65424794e+00,
                            3.70748067e+00, 3.10742757e+00, 2.48732044e+00,
                            2.09460050e+00,
                            1.69490993e+00, 1.43557553e+00, 1.17421288e+00,
                            9.99239999e-01,
                            8.24141216e-01, 7.03239167e-01, 5.82976746e-01,
                            4.97594659e-01,
                            4.13183443e-01, 3.51855523e-01, 2.91661405e-01,
                            2.33088690e-01,
                            1.94711274e-01, 1.57767432e-01, 1.22762910e-01,
                            9.04242635e-02,
                            6.17711687e-02, 4.66921849e-02, 3.69315576e-02,
                            2.84612066e-02,
                            2.13439981e-02, 1.55784894e-02, 1.10855883e-02,
                            7.71437791e-03,
                            5.26916061e-03, 3.54732671e-03, 2.36241878e-03,
                            1.55879567e-03,
                            1.02032920e-03, 6.65870806e-04, 4.33724551e-04,
                            2.81344674e-04,
                            1.81594318e-04, 1.17199486e-04, 7.64366916e-05,
                            5.06131384e-05,
                            3.38327069e-05, 1.67743548e-05, 7.96307568e-06,
                            4.85831921e-06,
                            4.17174086e-06, 3.45571364e-06, 2.40265760e-06,
                            7.42561334e-07,
                            -4.75957212e-07, -4.55116537e-08, 2.16928030e-07,
                            1.47280846e-07,
                            -3.21385469e-08, 8.25286825e-08, 8.91202734e-07,
                            -1.13282919e-07,
                            -1.89058779e-07, 6.46350725e-08, 5.87083704e-08,
                            -2.41520675e-08,
                            -1.80445478e-08, 8.23570977e-09, 2.19674270e-08,
                            6.37737076e-09,
                            -1.00863240e-09, -2.74105412e-09, -1.42426643e-09,
                            -3.49341385e-10,
                            -1.08365230e-10, 2.39808967e-11, 1.21535023e-13],
            "P_product": [0.00000000e+00, 2.27056932e-09, 1.51030213e-05,
                          5.57013969e-05,
                          9.70268260e-05, 1.39152917e-04, 2.04608499e-04,
                          2.72061409e-04,
                          3.93503192e-04, 5.21417081e-04, 6.56149542e-04,
                          8.86988753e-04,
                          1.13789552e-03, 1.41061109e-03, 2.02851829e-03,
                          2.75849026e-03,
                          3.62058068e-03, 4.63865076e-03, 5.84102933e-03,
                          7.26117506e-03,
                          8.93855263e-03, 1.09197418e-02, 1.32597554e-02,
                          1.60235766e-02,
                          1.92879608e-02, 2.31435633e-02, 2.76974534e-02,
                          3.30760868e-02,
                          3.94288155e-02, 4.69320313e-02, 5.28162676e-02,
                          5.94078775e-02,
                          6.67920534e-02, 7.96714350e-02, 9.07326183e-02,
                          1.03291267e-01,
                          1.17550324e-01, 1.33740161e-01, 1.62741803e-01,
                          1.97938819e-01,
                          2.27364358e-01, 2.61118134e-01, 2.99836765e-01,
                          3.44249815e-01,
                          3.95193259e-01, 4.53625235e-01, 5.20643782e-01,
                          5.97506656e-01,
                          6.85653614e-01, 7.86731278e-01, 9.02620156e-01,
                          1.03546219e+00,
                          1.18768394e+00, 1.31023171e+00, 1.44520567e+00,
                          1.53457521e+00,
                          1.62925193e+00, 1.68925724e+00, 1.75126796e+00,
                          1.79053995e+00,
                          1.83050901e+00, 1.85644245e+00, 1.88257871e+00,
                          1.90007600e+00,
                          1.91758588e+00, 1.92967608e+00, 1.94170233e+00,
                          1.95024053e+00,
                          1.95868166e+00, 1.96481445e+00, 1.97083386e+00,
                          1.97669113e+00,
                          1.98052887e+00, 1.98422326e+00, 1.98772371e+00,
                          1.99095757e+00,
                          1.99382288e+00, 1.99533078e+00, 1.99630684e+00,
                          1.99715388e+00,
                          1.99786560e+00, 1.99844215e+00, 1.99889144e+00,
                          1.99922856e+00,
                          1.99947308e+00, 1.99964527e+00, 1.99976376e+00,
                          1.99984412e+00,
                          1.99989797e+00, 1.99993341e+00, 1.99995663e+00,
                          1.99997187e+00,
                          1.99998184e+00, 1.99998828e+00, 1.99999236e+00,
                          1.99999494e+00,
                          1.99999662e+00, 1.99999832e+00, 1.99999920e+00,
                          1.99999951e+00,
                          1.99999958e+00, 1.99999965e+00, 1.99999976e+00,
                          1.99999993e+00,
                          2.00000005e+00, 2.00000000e+00, 1.99999998e+00,
                          1.99999999e+00,
                          2.00000000e+00, 1.99999999e+00, 1.99999991e+00,
                          2.00000001e+00,
                          2.00000002e+00, 1.99999999e+00, 1.99999999e+00,
                          2.00000000e+00,
                          2.00000000e+00, 2.00000000e+00, 2.00000000e+00,
                          2.00000000e+00,
                          2.00000000e+00, 2.00000000e+00, 2.00000000e+00,
                          2.00000000e+00,
                          2.00000000e+00, 2.00000000e+00, 2.00000000e+00]
        }
    )


@pytest.fixture
def monod_model_sds():
    return StandardDevs(
        X=0.2,
        S_substrate=0.2,
        P_product=0.2
    )


@pytest.fixture
def sds():
    return StandardDevs(
        X=0.2,
        Glucose=0.2,
        Acetate=0.2,
        Glutamate=0.2
    )
